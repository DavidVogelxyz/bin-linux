#!/usr/bin/env bash

# Name:     git-compare-dates
# Author:   David Vogel <david@davidvogel.xyz>
# Date:     2025 Sep 8, Mon
# License:  GPL v3.0
# Desc:     `git-compare-dates` quickly checks author vs committer info

count=0

check-git-repo() {
    git status > /dev/null 2>&1

    if [[ $? == 128 ]]; then
        echo "[ERROR]: The current directory is not a Git repo."
        exit 1
    fi

    gitlog=$(git log --pretty=fuller | grep -A 4 "^commit")
}

gcd-loop() {
    echo "[INFO]: Performing the loop..."

    while read -r line; do
        case "$line" in
            commit*)
                local commithash="${line##* }";
                commithash="${commithash:0:7}";
                commithash="${commithash@U}";;
            Author:*)
                local authorname="${line##*:     }";;
            AuthorDate*)
                local authordate="${line##*: }";;
            Commit:*)
                local commitauthorname="${line##*:     }";

                if ! [[ "$authorname" == "$commitauthorname" ]]; then
                    echo "[WARN]: Author names do not agree for commit \"$commithash\"."
                    echo "[WARN]: ${commithash}: \"$authorname\" vs \"$commitauthorname\""
                    count+=1
                    hash_oldest_disagreement="$commithash"
                fi;

                continue;;
            CommitDate*)
                local committerdate="${line##*: }";

                if ! [[ "$authordate" == "$committerdate" ]]; then
                    echo "[WARN]: Dates do not agree for commit \"$commithash\"."
                    echo "[WARN]: ${commithash}: \"$authordate\" vs \"$committerdate\""
                    count+=1
                    hash_oldest_disagreement="$commithash"
                fi;

                continue;;
            *)
                continue;;
        esac
    done <<< "$gitlog"
}

gcd-results() {
    echo "[INFO]: Comparison complete!"

    if (( count == 0 )); then
        echo
        echo "[INFO]: No disagreements detected."
    fi

    if ! (( count == 0 )); then
        local gitlog=$(git log --oneline | grep -i -A 1 "^${hash_oldest_disagreement}")
        local idx=1

        while read -r line; do
            if (( idx == 1 )); then
                idx=$(( idx + 1 ))
                continue
            fi

            if (( idx == 2 )); then
                hash_rebase="${line%% *}"
                break
            fi
        done <<< "${gitlog[@]}"

        echo
        echo "[INFO]: To address all discrepancies, rebase from commit ${hash_rebase@U}"
    fi
}

main() {
    check-git-repo

    gcd-loop

    gcd-results
}

main
